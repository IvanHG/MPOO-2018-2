//Playground Asíncrono

import PlaygroundSupport  //logramos hacer que sea Asíncrono
PlaygroundPage.current.needsIndefiniteExecution = true //se logran las peticiones asincronas

import UIKit

//:CONSUMOS A WEB SERVICES


struct Item:Codable{
    
    var artistName: String
    var artworkUrl100: String
    var trackName: String
    
    enum Llaves: String,CodingKey{
        
        case artistName
        case artworkUrl100
        case trackName
    }
    
    init (from decode: Decoder) throws{
        let contenedor  = try decode.container(keyedBy: Llaves.self)
        
        self.artistName = try contenedor.decode(String.self, forKey: Item.Llaves.artistName)
        self.artworkUrl100 = try contenedor.decode(String.self, forKey: Item.Llaves.artworkUrl100)
        self.trackName = try contenedor.decode(String.self, forKey: Item.Llaves.trackName)
        
        
    }
}

struct Items:Codable{
    var results : [Item]
}







//construimos una URL

let urlBase = URL(string: "https://itunes.apple.com/search?")! //se considera como un optional



//creamos un afuncion para pedir dos datos

let criterios = ["term":"the beatles", "media": "music", "limit":"10"]//diccionario

func citeriosBusqueda (urlBasse: URL, citerios: [String: String]) -> URL? {
    
    var componentes = URLComponents.init(url: urlBasse, resolvingAgainstBaseURL: true)
    
    componentes?.queryItems = criterios.flatMap({ (llave,valor) -> URLQueryItem? in
        URLQueryItem(name: llave, value: valor)
    })      //construlle arreglo con cada uno de los comoponenetes de URL que quiero solicitar
    
    return componentes?.url
}

citeriosBusqueda(urlBasse: urlBase, citerios: criterios)

//sequelPro (base de datos)
let itunsURL = citeriosBusqueda(urlBasse: urlBase, citerios: criterios)

URLSession.shared.dataTask(with: itunsURL!){ (data, respuesta, error) in
    
    let decodificador = JSONDecoder()
    
    if let datos = data{
//        let contenido = String(data: datos, encoding: .utf8)!
//        print(datos)
        
        let json = try? decodificador.decode(Items.self, from: datos)
        print(json!)
    }
}.resume()
